**************why go or features of Golang ***************

-go is static type safe and compile time language
-after compile its generate exe binary file which will run on any environment
-cross compile is possible means we can write go app on windows and compile on windows for linux
and can buil file for linux or any other os
-need to set GOOS = "linux" and OARCH = "amd64"
-fast compile and lightweight language because it doesnot relly on like java is relly on JVM go convert code to machine level direclty
- inbuilt garbage collection 
- when deploying file to server just need to put .ext file nothing else need to setup required even no need to install go there
- go has very powerfull standard librery like inbuilt testing package, crypto , net/http , database/sql package to deal with database 
- beutiful package managment 
- no need any container like apache tomcat to run web application. in net/http is very powerfull.
- some language are very good at system level like c and c ++ and very good at system level
but its not that much good for humen level
some language are good at humen level like python, Ruby but these are load on system so we cant say these 
language are good at system level, 
- so golang is developed and keep in mind these things, so go is middle of this 
means go is good at system level as well as humen level so that the buety of golang.
- it support concurrency as well we can perform parallelism with adding GOMAXPROC() in program

**********Go Concurrency ***********

Concurrency is dealing with multiple things at once (does not need to be done at the same time) with some time schedule 
while parallelism is doing the things at once at same time.
For example if two threads are running on two different cores then it will be called parallelism 
but when two threads are scheduled on a single core with some scheduling algorithm then it will be called as concurrency.

-Goroutine is managed by go runtime while threads managed by os.
-creation and destruction are very cheap as compared to threads,
-Goroutine takes 2kb size on stack while threads takes 1mb size , so we can run only 2-3 thousand threads but goroutines we can like lacks 
even crors also.

-Memory consumption: The creation of Goroutines require much lesser memory as compared to threads.
It requires 2kb of memory, while threads requires 1Mb(~500 times as compared to Goroutines).
They are designed in a way that stack size of Goroutines can grow and shrink according to the need of an application.
There might be only one thread in the program with thousands of Goroutines.

Setup and Teardown cost: Threads have significant setups and teardown costs because it has to request resources from the OS
and return it once itâ€™s done. While Goroutines are created and destroyed by the go runtime (it manages scheduling, garbage collection,
and the runtime environment for Goroutines) and those operations are pretty cheap.

**********gRPC *******************

-gRPC utilizes HTTP/2 whereas REST utilizes HTTP 1.1
-gRPC utilizes the protocol buffer data format as opposed to the standard JSON data format that is typically used within REST APIs
-With gRPC you can utilize HTTP/2 capabilities such as server-side streaming, client-side streaming or even bidirectional-streaming should you wish.
- it uses protobuff format , in proto file contains messages like request response message and rpc service method.
- in server file have to create grpc server and it will listen on some port  
- In single connection we can perform many operations using grpc like single connection to server and server can send stream of data back to client.
-we can compile .proto file using 
    protoc --go_out=plugins=grpc:chat chat.proto
- in client we just need to establish connection with server just like database connection and invoke server side methods.
- cross language compatibilty with grpc is possible like client can be written in .net and server could be in golang
- client able to direclty to call to server function.
- payload size of protobuff is smaller as compared to JSON
ex ===>
    {
        "name":"Prashant",
        "city":"pune",
        "number":99889999
    }
    it will take approchimatlty 55 bytes on other hands
    message person {
        string name
        string city 
        int32 number
    }
    this will take 20bytes 
    -so its lightweight and faster than json because its a binary format.
-parsing protocol bufferr is easy to cpu because its in binary format and parsing json is cpu intensive because it humen readable format.
-it is open source librery and developed by google 

*****************encryption***************
symentric 
public key encryption

*************symentric************ 
 same key used to encrypt as well decrypttion 
faster compared to public key
key need to be stored in safe place
- need to transfer key between both parties.

*********public key encryption or asymentric*********
- it uses public and private key 
- with the help of public key only encryption is possible
- if we want to decrypttion of data at that time private key is needed.
- private key persist on server so wont need to transfer to client

**********TLS SSL certificates***************
SSL certificates used to transfer information overer HTTP with secuure
it encrypt information 
need to generate SSL certificates with openssl 
you can generate with self signed or CA certificates signed
crypto/x509  used
ListenAndServeTLS(url, ".cert" ".key")

client                                              server
hello msg to server                                 
    with info :
        -ssl version
        -session Id
        -cypher suite
        -compression method ---------------->       authenticate 
         server hello done msg recivvied <---------------  send certificate and key to client                                 

client will provide his certificates and key exchange to server -----> once authenticate done
both can communicate via secuure connection

*****************Data Structure *********************

                  1  
                 / \
                2   3  
                /\
               4  5        
************ BFS *********************
breadth first search algo works on visit nearest adjecent edge first 
- it search based on level wise 
- it uses queue data structure to store 
ex := search nearest location on map 
      facebook suggestions like freiend of freiend
bfs of above tree is
1,2,3,4,5
*************DFS ********************** 
- it search deep item from tree .
- started from root it will visit node until there is no path present furthure
- it uses stack as data structure to store
- it will go to deep into level and if last adjecent is there it will reverse back 
- in above tree bfs is 
    1,2,4,5,3

*************tree traversing***************

(a) Inorder (Left, Root, Right) : 4 2 5 1 3 
(b) Preorder (Root, Left, Right) : 1 2 4 5 3 
(c) Postorder (Left, Right, Root) : 4 5 2 3 1

 ****************Interview Questions****************
buffered channels : not guarenty of delevery
unbuffered channels : guarenty of delevery
1) why people choose concurrency over parllalism 
2) what are interfaces & use cases?   
3) diffrence between slice and array 
4) len vs cap ? 
5) binary search 
6) inorder, pre-order, post-order traversing 
7) stack and queue 
8)  bfs and dfs and use cases
9) how to restrict multiple goroutines to access shared resourse ? i.e mutex ? 
10) pass slice to function vs pass array to func ?? 
11) rest vs gRPC 
12) does docker container are isolated ?
13) docker networking ,docker commit 
14) sql joins 
15) when to use buffered and when to use buffered channels 
16) multi-staging in docker 
17) print 1-10 number using go routine in order
18) print follow 
    employee.Name("Prashant").WorksFor("Persistent").LivesIn("Pune").Build()
19) can we run go exe on anathor platfor like from windows to linux
20) new vs make
21) function vs method
22) multi-dimentional array golang
23) 


